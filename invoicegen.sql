-- MySQL Script generated by MySQL Workbench
-- Mon Nov  5 21:00:30 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema invoicegen
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema invoicegen
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `invoicegen` DEFAULT CHARACTER SET latin1 ;
USE `invoicegen` ;

-- -----------------------------------------------------
-- Table `invoicegen`.`invoice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `invoicegen`.`invoice` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `BillToName` VARCHAR(255) NOT NULL,
  `BillToAddress1` VARCHAR(255) NULL DEFAULT NULL,
  `BillToAddress2` VARCHAR(255) NULL DEFAULT NULL,
  `BillToCity` VARCHAR(255) NULL DEFAULT NULL,
  `BillToState` CHAR(2) NULL DEFAULT NULL,
  `BillToZipcode` VARCHAR(10) NULL DEFAULT NULL,
  `ServiceDate` DATE NULL DEFAULT NULL,
  `Terms` VARCHAR(50) NOT NULL DEFAULT 'NET30',
  `TaxRate` FLOAT NOT NULL DEFAULT '0',
  `AmountPaid` DECIMAL(8,2) NOT NULL DEFAULT '0.00',
  `DueDate` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB
AUTO_INCREMENT = 43
DEFAULT CHARACTER SET = latin1;


-- -----------------------------------------------------
-- Table `invoicegen`.`invoice_item`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `invoicegen`.`invoice_item` (
  `ID` INT(11) NOT NULL AUTO_INCREMENT,
  `InvoiceID` INT(11) NOT NULL,
  `Description` VARCHAR(255) NOT NULL,
  `Qty` INT(11) NOT NULL DEFAULT '1',
  `Rate` INT(11) NOT NULL DEFAULT '500',
  `Date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`ID`),
  INDEX `InvoiceItemInvoiceIDInvoiceID` (`InvoiceID` ASC))
ENGINE = InnoDB
AUTO_INCREMENT = 58
DEFAULT CHARACTER SET = latin1;

USE `invoicegen` ;

-- -----------------------------------------------------
-- procedure CreateInvoice
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CreateInvoice`(
    IN b2name varchar(255),
 	IN b2address1 varchar(255),
    IN b2address2 varchar(255), 
    IN b2city varchar(255),
    IN b2state char(2),
    IN b2zipcode varchar(11),
    IN servicedate date,
    IN terms varchar(255),
    IN taxrate decimal(5,2),
    IN amountpaid decimal(8,2),
    IN duedate date
)
BEGIN 
insert into invoice (`BillToName`,
						`BillToAddress1`,
                        `BillToAddress2`,
                        `BillToCity`,
                        `BillToState`,
                        `BillToZipcode`,
                        `ServiceDate`,
                        `Terms`,
                        `TaxRate`,
                        `AmountPaid`,
                        `DueDate`) 
values (b2name, b2address1, b2address2, b2city, b2state, b2zipcode, servicedate, terms, taxrate, amountpaid, duedate);

select last_insert_id() as `ID`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CreateInvoiceItem
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CreateInvoiceItem`(
    IN invoiceid int,
 	IN description varchar(255),
    IN qty int,
    IN rate int,
    IN date date
)
BEGIN 
insert into invoice_item (`InvoiceID`,`Description`,`Qty`,`Rate`,`Date`) values (invoiceid,description,qty,rate,date);
select LAST_INSERT_ID() as `ID`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteInvoice
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DeleteInvoice`(
    IN id int
)
BEGIN 
delete from invoice_item 
where  invoice_item.InvoiceID = id;

delete from invoice
where invoice.ID = id;

select row_count() as `n`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteInvoiceItem
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DeleteInvoiceItem`(
    IN id int
)
BEGIN 
delete from invoice_item 
where  invoice_item.ID = id;

select row_count() as `n`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetInvoice
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetInvoice`(
    IN id int
)
BEGIN 
select invoice.ID,
invoice.BillToName,
invoice.BillToAddress1,
invoice.BillToAddress2,
invoice.BillToCity,
invoice.BillToState,
invoice.BillToZipcode,
invoice.ServiceDate,
invoice.Terms,
invoice.TaxRate,
invoice.AmountPaid,
invoice.DueDate, 
get_subtotal_byinvoiceid(id) as Subtotal ,
get_total_byinvoiceid(id) as Total,
get_balance_byinvoiceid(id) as Balance
from invoice where invoice.ID = id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetInvoiceItemByID
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetInvoiceItemByID`(
    IN invoiceid int,
    IN invoiceitemid int
)
BEGIN 
select 	ID, 
		InvoiceID, 
        Description,
		Qty, 
        Rate, 
        Date,
        Rate * Qty as `Amount` 
from invoice_item 
where invoice_item.InvoiceID = invoiceid
and invoice_item.ID = invoiceitemid;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetInvoiceItemsByInvoiceID
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetInvoiceItemsByInvoiceID`(
    IN invoiceid int
)
BEGIN 
select 	ID, 
		InvoiceID, 
        Description,
		Qty, 
        Rate, 
        Date,
        Rate * Qty as `Amount` 
from invoice_item where invoice_item.InvoiceID = invoiceid order by ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure GetInvoices
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `GetInvoices`()
BEGIN 
select * from invoice order by servicedate desc;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateInvoice
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateInvoice`(
    IN id int,
    IN b2name varchar(255),
 	IN b2address1 varchar(255),
    IN b2address2 varchar(255), 
    IN b2city varchar(255),
    IN b2state char(2),
    IN b2zipcode varchar(11),
    IN servicedate date,
    IN terms varchar(255),
    IN taxrate decimal(5,2),
    IN amountpaid decimal(8,2),
    IN duedate date
)
BEGIN 
update invoice set BillToName = b2name,
						BillToAddress1 = b2address1,
                        BillToAddress2 = b2address2,
                        BillToCity = b2city,
                        BillToState = b2state,
                        BillToZipcode = b2zipcode,
                        ServiceDate = servicedate,
                        Terms = terms,
                        TaxRate = taxrate,
                        AmountPaid = amountpaid,
                        DueDate = duedate
where	invoice.ID = id;

select case when row_count() > 0 then true else false end;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure UpdateInvoiceItem
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `UpdateInvoiceItem`(
    IN id int,
    IN invoiceid int,
 	IN description varchar(255),
    IN qty int,
    IN rate int,
    IN date date
)
BEGIN 
update invoice_item 
	set `InvoiceID` = invoiceid,
    `Description`= description,
    `Qty` = qty,
    `Rate` = rate,
    `Date` = date
where  invoice_item.ID = id
and invoice_item.InvoiceID = invoiceid;

select case when row_count() > 0 then true else false end;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_balance_byinvoiceid
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `get_balance_byinvoiceid`(idparam int) RETURNS decimal(8,2)
BEGIN
declare x int;
select (sum(qty * rate) * (1 + invoice.taxrate)) - invoice.amountpaid
from invoice_item 
inner join invoice on invoice_item.invoiceid = invoice.id
where invoiceid = idparam into x;


return IFNULL(x,0);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_subtotal_byinvoiceid
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `get_subtotal_byinvoiceid`(id int) RETURNS decimal(8,2)
BEGIN
declare x int;
select sum(qty * rate) from invoice_item where invoiceid = id into x;
return IFNULL(x,0);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function get_total_byinvoiceid
-- -----------------------------------------------------

DELIMITER $$
USE `invoicegen`$$
CREATE DEFINER=`root`@`localhost` FUNCTION `get_total_byinvoiceid`(idparam int) RETURNS decimal(8,2)
BEGIN
declare x int;
select sum(qty * rate) * (1 + invoice.taxrate)
from invoice_item 
inner join invoice on invoice_item.invoiceid = invoice.id
where invoiceid = idparam into x;

return IFNULL(x,0);
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
